// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolsReviewApp.Data;

#nullable disable

namespace ToolsReviewApp.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ToolsReviewApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Companie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanieId")
                        .HasColumnType("int");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanieId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("ToolId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Reviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Withdraw")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.ToolCategory", b =>
                {
                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ToolId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ToolCategories");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.ToolOwner", b =>
                {
                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("ToolId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ToolOwners");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Owner", b =>
                {
                    b.HasOne("ToolsReviewApp.Models.Companie", "Companie")
                        .WithMany("Owners")
                        .HasForeignKey("CompanieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companie");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Review", b =>
                {
                    b.HasOne("ToolsReviewApp.Models.Reviewer", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolsReviewApp.Models.Tool", "Tool")
                        .WithMany("Reviews")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.ToolCategory", b =>
                {
                    b.HasOne("ToolsReviewApp.Models.Category", "Category")
                        .WithMany("ToolCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolsReviewApp.Models.Tool", "Tool")
                        .WithMany("ToolCategories")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.ToolOwner", b =>
                {
                    b.HasOne("ToolsReviewApp.Models.Owner", "Owner")
                        .WithMany("ToolOwners")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolsReviewApp.Models.Tool", "Tool")
                        .WithMany("ToolOwners")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Category", b =>
                {
                    b.Navigation("ToolCategories");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Companie", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Owner", b =>
                {
                    b.Navigation("ToolOwners");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Reviewer", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ToolsReviewApp.Models.Tool", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("ToolCategories");

                    b.Navigation("ToolOwners");
                });
#pragma warning restore 612, 618
        }
    }
}
